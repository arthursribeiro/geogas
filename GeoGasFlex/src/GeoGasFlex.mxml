<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:classes="classes.*" xmlns:views="classes.views.*">
	<fx:Declarations>
		<s:RemoteObject id="ro" destination="PostoCombustivelService" result="ro_resultHandler(event)" fault="ro_faultHandler(event)"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import classes.Constants;
			import classes.events.EventoPesquisa;
			import classes.model.Entidade;
			import classes.model.GMLParser;
			import classes.model.Tesaurus;
			
			import com.google.maps.Color;
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapMoveEvent;
			import com.google.maps.MapType;
			import com.google.maps.MapTypeOptions;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.NavigationControl;
			import com.google.maps.controls.NavigationControlOptions;
			import com.google.maps.controls.OverviewMapControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ScaleControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.overlays.Marker;
			
			import flashx.textLayout.formats.Float;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			
			import spark.effects.Scale;
			
			private var markers:ArrayList = new ArrayList();
			
			
			private var bboxFilter:String = "<BBOX>" +
				"<PropertyName>geom</PropertyName>" +
				"<gml:Box srsName=\"http://www.opengis.net/gml/srs/epsg.xml#4326\">" +
				"<gml:coordinates>"+Constants.REPLACE_VALUE+"</gml:coordinates>" +
				"</gml:Box>" +
				"</BBOX>";
			private var propBetweenFilter:String = "<PropertyIsBetween>" +
				"<PropertyName>"+Constants.REPLACE_PROP_NAME+"</PropertyName>" +
				"<LowerBoundary><Literal>"+Constants.REPLACE_MIN_VALUE+"</Literal></LowerBoundary>" +
				"<UpperBoundary><Literal>"+Constants.REPLACE_MAX_VALUE+"</Literal></UpperBoundary>" +
				"</PropertyIsBetween>";
			private var propIsLikeFilter:String = "<PropertyIsLike escapeChar=\"\\\" singleChar=\"_\" wildCard=\"%\">" +
				"<PropertyName>"+Constants.REPLACE_PROP_NAME+"</PropertyName>" +
				"<Literal>"+Constants.REPLACE_VALUE+"</Literal>" +
				"</PropertyIsLike>" 
			
			private var filtersBlank:String = "<Filter xmlns:gml=\"http://www.opengis.net/gml\" xmlns=\"http://www.opengis.net/ogc\">" +
				"<And>"+Constants.REPLACE_FILTERS+"</And>" +
				"</Filter>";
			
			private var preco:Number = 0;
			private var bandeira:String;
			private var aplicarfiltros:Boolean = false;
			
			private function init():void{
				Tesaurus.getInstance();
				this.map.enableScrollWheelZoom();
				this.map.addControl(new MapTypeControl());
				this.map.addControl(new NavigationControl());
				this.map.addControl(new ScaleControl());
				this.map.addControl(new OverviewMapControl());
				this.map.setCenter(new LatLng(-7.224206,-35.881004), 12, MapType.NORMAL_MAP_TYPE);
				//				map.addEventListener(MapMouseEvent.CLICK,mapClicked);
				map.addEventListener(MapMoveEvent.MOVE_END, updateMap);
				search.addEventListener("submeter", realizarPesquisa);
				requisitar();
			}
			
			private function realizarPesquisa(ev:EventoPesquisa):void {
				trace("bla");
				this.aplicarfiltros = true;
				this.preco = ev.preco;
				var raio:Number = ev.raio;
				this.bandeira = ev.bandeira;
				requisitar();
			}
			
			private function updateMap(event:MapMoveEvent):void{
				limparMapa();
				requisitar();
			}
			
			private function limparMapa():void{
				for(var i:int = 0; i<markers.length;i++){
					var marker:Entidade = markers.getItemAt(i) as Entidade;
					map.removeOverlay(marker);
				}
				markers = new ArrayList();
			}
			
			private function OlaMundo():void {
			}
			
			public function mapClicked(event:MapMouseEvent):void{
				if(map){
					map.getLatLngBounds();
					var latLng:LatLng = event.latLng;
					var defaultData:Dictionary = new Dictionary();
					
					var defaultFormEdit:Dictionary = new Dictionary();
					defaultFormEdit["editing"] = "texto a editar";
					
					defaultData["editable"] = defaultFormEdit;
					
					var defaultForm:Dictionary = new Dictionary();
					defaultForm["razaosocial"] = "Zé Mané";
					defaultForm["nome"] = "sdgsdg";
					defaultForm["endereco"] = "235";
					defaultForm["cnpjcpf"] = "sdfdf";
					defaultForm["data_criacao"] = "3446";
					
					defaultData["notEditable"] = defaultForm;
					
					var otherTabs:Dictionary = new Dictionary();
					
					otherTabs["postocombustivel"] = defaultData;
					otherTabs["tipocombustivel"] = defaultData;
					
					var marker:Entidade = new Entidade(latLng,1,defaultData,otherTabs);
					
					
					addMarker(marker);
				}
			}
			
			public function addMarker(marker:Entidade):void{
				marker.addEventListener(MapMouseEvent.CLICK,markerClicked);
				map.addOverlay(marker);
				markers.addItem(marker);
			}
			
			public function markerClicked(event:MapEvent):void{
				var marker:Entidade = event.target as Entidade;
				marker.openInfoWindow(marker.getInfoWindowOptions());
			}
			
			protected function ro_resultHandler(event:ResultEvent):void {
				var serverUrl:String = event.result.toString();
				var request:URLRequest = new URLRequest(serverUrl);
				var urlLoader:URLLoader = new URLLoader(request);
				urlLoader.addEventListener(Event.COMPLETE, resultHttpRequest);
				urlLoader.addEventListener(ErrorEvent.ERROR, failHttpRequest);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, failHttpRequest);
				urlLoader.load(request);
			}
			
			protected function ro_faultHandler(event:FaultEvent):void {
				Alert.show('Ocorreu um erro com o Objeto Remoto, tente novamente mais tarde.');
			}
			
			private function getMapBBox():String{
				var bbox:LatLngBounds = map.getLatLngBounds();
				var bboxStr:String = bbox.getSouthWest().lng()+","+bbox.getSouthWest().lat()+" "+bbox.getNorthEast().lng()+","+bbox.getNorthEast().lat();
				return bboxStr;
			}
			
			private function requisitar():void {
				var serverUrl:String = "http://localhost:8080/geoserver/wfs?request=GetFeature&version=1.0.0&typeName=geogas:entidade_postos&FILTER=";
				var filters:String = bboxFilter.replace(Constants.REPLACE_VALUE,getMapBBox());
				
				if(this.aplicarfiltros && (this.preco > 0)){
					var filpreco:String = propBetweenFilter.replace(Constants.REPLACE_PROP_NAME,"pricegasoline").replace(Constants.REPLACE_MIN_VALUE,"0").replace(Constants.REPLACE_MAX_VALUE,preco.toString());
					filters.concat(filpreco);
				//}if(this.raio > 0){
					
				}if(this.aplicarfiltros && (this.bandeira.length > 0)){
					var filbandeira:String = propIsLikeFilter.replace(Constants.REPLACE_PROP_NAME,"bandeira").replace(Constants.REPLACE_VALUE,this.bandeira);
					filters.concat(filbandeira);
				}
				
				ro.encodeUrl.send(serverUrl,filtersBlank.replace(Constants.REPLACE_FILTERS,filters));
			}
			
			public function resultHttpRequest(e:Event):void {
				var xml:XML = new XML(e.target.data);
				var parser:GMLParser = new GMLParser(xml);
				var dic:Dictionary = parser.getDictionary();
				
				for(var marker:String in dic){
					var data:Dictionary = new Dictionary();
					var lat:Number = 0;
					var lng:Number = 0;
					var id:int = 0;
					for(var prop:String in dic[marker]){
						var label:String = prop.toString().replace("geogas","");
						label = label.toString().replace("::","");
						if( label.toUpperCase() == Constants.LATITUDE.toUpperCase()){
							lat = new Number( dic[marker][prop]);
						}
						else if( label.toUpperCase() == Constants.LONGITUDE.toUpperCase()){
							lng = new Number( dic[marker][prop]);
						}
						else{
							if( label.toUpperCase().indexOf(Constants.ID.toUpperCase())>=0){
								id = new Number(dic[marker][prop]);
							}else{
								data[label] = dic[marker][prop];
							}
						}
					}
					var defaulData:Dictionary = new Dictionary();
					defaulData[Constants.EDITABLE] = data;
					var entidade:Entidade = new Entidade(new LatLng(lat,lng),id,defaulData);
					addMarker(entidade);
				}
			}
			
			public function failHttpRequest(e:Event):void {
				Alert.show('Ocorreu um erro com a comunicação, tente novamente mais tarde.');
			}
			
		]]>
	</fx:Script>
	<mx:TabNavigator x="0" y="0" width="100%" height="100%">
		<s:NavigatorContent width="100%" height="100%" label="Map">
			<s:HGroup x="0" y="0" width="100%" height="100%">
				<s:BorderContainer width="20%" height="100%">
					<views:SearchComponent x="-4" y="10" id="search">
					</views:SearchComponent>
				</s:BorderContainer>
				<s:BorderContainer width="80%" height="100%" id="mapC">
					<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mapready="init()" width="100%" height="100%" sensor="true"
							  key="ABQIAAAArTOg12ENOoBN3O9kedACIxRkOv5Oc89yJ4sUflDi_EcLCzRIOBTMHpzPf7PADkHpU0-4GpQuUVpflw"/>
				</s:BorderContainer>
			</s:HGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Search">
		</s:NavigatorContent>
	</mx:TabNavigator>
</s:Application>
