<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="400" height="400" creationComplete="init()" currentState="State1" borderVisible="false" close="close()"
		 >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<s:states>
		<s:State name="State1"/>
		<s:State name="ANP"/>
		<s:State name="loggedFacebook"/>
	</s:states>
	<fx:Declarations>
		<s:RemoteObject id="ro" destination="PostoCombustivelService" result="saveDataResult(event)" fault="saveDataFault(event)"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import classes.Constants;
			import classes.events.FacebookEvent;
			import classes.model.Entidade;
			import classes.model.Tesaurus;
			
			import com.google.maps.controls.NavigationControl;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.HorizontalList;
			import mx.controls.TextInput;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.components.NavigatorContent;
			import spark.components.Scroller;
			import spark.components.VGroup;
			
			import utils.FacebookConnection;
			
			private var dic:Tesaurus;
			private var ent:Entidade;
			
			private var fb:FacebookConnection;
			
			[Bindable]
			private var cnpjcpfStr:String;
			[Bindable]
			private var autorizacaoStr:String;
			[Bindable]
			private var razaoSocialStr:String;
			[Bindable]
			private var despachoStr:String;
			[Bindable]
			private var bandeiraStr:String;
			[Bindable]
			private var nomeFantasiaStr:String;
			[Bindable]
			private var denunciasStr:String;
			[Bindable]
			private var autuacoesStr:String;
			
			public function init():void {
				fb = FacebookConnection.getInstance();
//				if(fb.connected) {
//					currentState="loggedFacebook";
//				} else {
//					currentState="State1";
//				}
				fb.addEventListener(FacebookEvent.FACEBOOK_CONNECTED, loginHandler);
				fb.addEventListener(FacebookEvent.FACEBOOK_DISCONNECTED, logoutHandler);
			}
			
			protected function loginHandler(ev:Event):void
			{
				currentState="loggedFacebook";
			}
			
			protected function logoutHandler(ev:Event):void{
				currentState="State1";
			}
			
			public function setVariables(entity:Entidade,dict:Tesaurus):void{
				this.dic = dict;
				this.ent = entity;
				
				this.autorizacaoStr = ent.autorizacao;
				this.cnpjcpfStr = ent.cnpjcpf;
				this.razaoSocialStr = ent.razaosocial;
				this.despachoStr = ent.numerodespacho;
				this.bandeiraStr = ent.bandeira;
				this.nomeFantasiaStr = ent.getLabel();
				this.autuacoesStr = ent.autuacoes?ent.autuacoes.toString():"--";
				this.denunciasStr = ent.denuncias?ent.denuncias.toString():"--";
			}
			
			private function close():void{
				PopUpManager.removePopUp(this);
			}
			
			private function ro_faultHandler(e:FaultEvent):void{
				Alert.show("Problema ao resgatar informações dessa entidade.");
			}
			
			protected function submeter():void {
				fb.addEventListener(FacebookEvent.FACEBOOK_POSTED, postHandler);
				var comment:String = "";
				if(commentArea.text != "") {
					comment += "\"" + commentArea.text + "\""; 
				}
				var text:String;
				if(comment != "") {
					text = "Avaliei o posto " + this.ent.nomefantasia + " com nota " + rating.value + " pelo GeoGas: " + comment + " - Visite você também!";
				} else {
					text = "Avaliei o posto " + this.ent.nomefantasia + " com nota " + rating.value + " pelo GeoGas. Visite você também!";
				}
				
				fb.submitPost(text);
			}
			
			protected function postHandler(ev:Event):void {
				fb.removeEventListener(FacebookEvent.FACEBOOK_POSTED, postHandler);
				Alert.show("Avaliação foi publicada. Obrigado!");
//				close();
			}
			
			private function saveData(ev:MouseEvent):void{
				var service:HTTPService = new HTTPService();
				service.url = Constants.SERVER_AD+"/geogas/struts/updateData?id="+ent.id+
					"&nomeFantasia="+this.nomeFantasia.text+
					"&bandeira="+this.bandeira.text+
					"&autorizacao="+this.autorizacao.text+
					"&numeroDespacho="+this.numeroDespacho.text+
					"&cnpjCpf="+this.cnpjCpf.text;
				service.showBusyCursor = true;
				service.addEventListener(ResultEvent.RESULT, saveDataResult);
				service.addEventListener(FaultEvent.FAULT, saveDataFault);
				service.send();
			}
			
			private function denunciarPosto():void{
				var service:HTTPService = new HTTPService();
				service.url = Constants.SERVER_AD+"/geogas/struts/denunciar?id="+ent.id+
					"&autuacao="+this.denunciaArea.text+
					"&idUser="+this.fb.id;
				service.showBusyCursor = true;
				service.addEventListener(ResultEvent.RESULT, saveDenunciaResult);
				service.addEventListener(FaultEvent.FAULT, saveDenunciaFault);
				service.send();
			}
			
			private function saveDenunciaResult(ev:ResultEvent):void{
				Alert.show("Denúncia realizada com sucesso.");
				ent.denuncias = ent.denuncias?(ent.denuncias+1):1;
				updateLabels();
				ent.updateInfoWindow();
			}
			
			private function saveDenunciaFault(ev:FaultEvent):void{
				Alert.show("Denúncia não pôde ser realizada. \nPor favor tente novamente mais tarde.");
			}
			
			private function autuarPosto():void{
				var service:HTTPService = new HTTPService();
				service.url = Constants.SERVER_AD+"/geogas/struts/autuar?id="+ent.id+
					"&autuacao="+this.autuacaoArea.text;
				service.showBusyCursor = true;
				service.addEventListener(ResultEvent.RESULT, saveAutuacaoResult);
				service.addEventListener(FaultEvent.FAULT, saveAutuacaoFault);
				service.send();
			}
			
			private function saveAutuacaoResult(ev:ResultEvent):void{
				Alert.show("Autuação realizada com sucesso.");
				ent.autuacoes = ent.autuacoes?(ent.autuacoes+1):1;
				this.autuacaoArea.text = "";
				updateLabels();
				ent.updateInfoWindow();
			}
			
			private function saveAutuacaoFault(ev:FaultEvent):void{
				Alert.show("Autuação não pôde ser realizada. \nPor favor tente novamente mais tarde.");
			}
			
			private function saveAvaliacao():void{
				var service:HTTPService = new HTTPService();
				service.url = Constants.SERVER_AD+"/geogas/struts/avaliar?id="+ent.id+
					"&nota="+this.rating.value+"&idUser="+this.fb.id;
				service.showBusyCursor = true;
				service.addEventListener(ResultEvent.RESULT, saveAvalaiacaoResult);
				service.addEventListener(FaultEvent.FAULT, saveAvalaiacaoFault);
				service.send();
			}
			
			private function saveAvalaiacaoResult(ev:ResultEvent):void{
				Alert.show("Autuação realizada com sucesso.");
				updateLabels();
				ent.updateInfoWindow();
			}
			
			private function saveAvalaiacaoFault(ev:FaultEvent):void{
				Alert.show(ev.fault.toString());
				Alert.show("Avaliação não pôde ser realizada. \nPor favor tente novamente mais tarde.");
			}
			
			public function updateLabels():void{
				this.autuacoesStr = ent.autuacoes?ent.autuacoes.toString():"--";
				this.denunciasStr = ent.denuncias?ent.denuncias.toString():"--";
			}
			
			private function saveDataResult(ev:ResultEvent):void{
				Alert.show("Informações atualizadas com sucesso. \nObrigado pela contribuição.");
				ent.autorizacao = this.autorizacao.text;
				ent.nomefantasia = this.nomeFantasia.text;
				ent.bandeira = this.bandeira.text;
				ent.numerodespacho = this.numeroDespacho.text;
				ent.cnpjcpf = this.cnpjCpf.text;
				updateLabels();
				ent.updateInfoWindow();
			}
			
			private function saveDataFault(ev:FaultEvent):void{
				Alert.show("Informações não puderam ser atualizadas. \nPor favor tente novamente mais tarde.");
			}
			
		]]>
	</fx:Script>
	<!--< width="100%" height="100%" borderVisible="false" close="close()" >-->
		<mx:TabNavigator id="tabBar" width="100%" height="100%" borderVisible="false">
			<s:NavigatorContent label="Informações Gerais" id="info" width="100%" height="100%">
				<s:Form width="100%" height="100%">
					<mx:HBox width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="Nome:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput editable.State1="false" editable.loggedFacebook="false" editable.ANP="true"
									 text="{this.nomeFantasiaStr}" height="30" width="258"
									 id="nomeFantasia"
									 />
					</mx:HBox>
					
					<mx:HBox width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="Bandeira:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput height="30"  width="258" editable.State1="false" editable.loggedFacebook="false" editable.ANP="false"
									 text="{this.bandeiraStr}"
									 id="bandeira"/>
					</mx:HBox>	
					
					<mx:HBox  width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="CNPJ/CPF:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput restrict="0-9\.\/\-" height="30" editable.State1="false" editable.loggedFacebook="false" editable.ANP="true"
									 text="{this.cnpjcpfStr}"  width="258"
									 id="cnpjCpf"/>
					</mx:HBox>
					
					<mx:HBox  width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="Autorização:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput height="30"  width="258" editable.State1="false" editable.loggedFacebook="false" editable.ANP="true"
									 text="{this.autorizacaoStr}"
									 id="autorizacao"/>
					</mx:HBox>
					
					<mx:HBox width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="Despacho:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput height="30" width="258" editable.State1="false" editable.loggedFacebook="false"
									 editable.ANP="true" text="{this.despachoStr}"
									 id="numeroDespacho"/>
					</mx:HBox>
					
					<mx:HBox  width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="22" fontSize="15" text="Denúncias:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput height="30" width="40" editable="false"
									 text="{this.denunciasStr}"
									 />
						<s:Image x="176" y="160" width="40"
								 source="{Constants.SERVER_AD+'/geogas/imgs/denuncia.jpg'}"
								 />
					</mx:HBox>
					
					
					<mx:HBox  width="100%" height="36" verticalAlign="middle" borderVisible="false">
						<s:Label width="109" height="30" fontSize="15" text="Autuações:"
								 textAlign="right" verticalAlign="middle"
								 />
						<s:TextInput width="40" height="30" editable="false"
									 text="{this.autuacoesStr}"
									 />
						<s:Image x="176" y="196" width="40"
								 source="{Constants.SERVER_AD+'/geogas/imgs/autuacao.jpg'}"
								 />
						<s:Spacer includeIn="ANP" width="85" height="10"/>
						<s:Button includeIn="ANP" height="30" label="Save" click="saveData(event)"
								  cornerRadius="0"/>
					</mx:HBox>
					
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent label="Avaliação" width="100%" height="100%" includeIn="loggedFacebook,ANP">
				<s:Label includeIn="ANP" left="10" top="10" width="131" height="34"
						 fontSize="18" text="Nova Autuação:"
						 textAlign="center" verticalAlign="middle"/>
				<s:TextArea id="autuacaoArea" includeIn="ANP" left="10" top="48" width="380" height="90" maxChars="140"/>
				<s:Button includeIn="ANP" right="9" bottom="160" width="103" height="34"
						  label="Autuar" click="autuarPosto()"/>
				
				<s:Label includeIn="loggedFacebook" left="10" top="10" width="131" height="34"
						 fontSize="18" text="Nova Denúncia:"
						 textAlign="center" verticalAlign="middle"/>
				<s:TextArea id="denunciaArea" includeIn="loggedFacebook" left="10" top="48" width="380" height="90" maxChars="140"/>
				<s:Button includeIn="loggedFacebook" right="9" bottom="160" width="103" height="34"
						  label="Denunciar" click="denunciarPosto()"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="Opinião" width="100%" height="100%" includeIn="loggedFacebook">
				<s:HSlider x="98" y="149" minimum="0" maximum="10" value="5" id="rating" width="198" height="10"  includeIn="loggedFacebook"/>
				<s:Label x="10" y="121" text="Nota:" fontSize="14" width="41" height="17" includeIn="loggedFacebook"/>
				<s:Label x="9" y="3" text="Comentário:" includeIn="loggedFacebook"/>
				<s:TextArea x="10" y="23" height="85" width="380" id="commentArea" includeIn="loggedFacebook"/>
				<s:Button x="10" y="189" width="60" height="19" buttonMode="true"  id="shareButton" label="Share" click="submeter()" skinClass="skins.FBShareButton" includeIn="loggedFacebook"/>
				<s:Button x="315" y="188" label="Submeter" id="submitEvaluation" includeIn="loggedFacebook" click="saveAvaliacao()"/>
				<s:Label x="97" y="132" text="0                                                          10" width="200" includeIn="loggedFacebook"/>
			</s:NavigatorContent>
		</mx:TabNavigator>
	
<!--</s:Group>-->
</s:TitleWindow>
